// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: image.proto
package task

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type ImageService interface {
	PullImage(context.Context, *PullImageRequest) (*PullImageResponse, error)
}

func RegisterImageService(srv *ttrpc.Server, svc ImageService) {
	srv.RegisterService("containerd.task.v2.Image", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"PullImage": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PullImageRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PullImage(ctx, &req)
			},
		},
	})
}

type imageClient struct {
	client *ttrpc.Client
}

func NewImageClient(client *ttrpc.Client) ImageService {
	return &imageClient{
		client: client,
	}
}

func (c *imageClient) PullImage(ctx context.Context, req *PullImageRequest) (*PullImageResponse, error) {
	var resp PullImageResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Image", "PullImage", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
